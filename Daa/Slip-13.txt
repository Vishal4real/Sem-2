Q1
public class MatrixChainMultiplication {

    static int matrixChainOrder(int[] p) {
        int n = p.length - 1;
        int[][] dp = new int[n][n];

        for (int len = 2; len <= n; len++) {
            for (int i = 0; i < n - len + 1; i++) {
                int j = i + len - 1;
                dp[i][j] = Integer.MAX_VALUE;

                for (int k = i; k < j; k++) {
                    int cost = dp[i][k] + dp[k + 1][j] + p[i] * p[k + 1] * p[j + 1];
                    if (cost < dp[i][j]) {
                        dp[i][j] = cost;
                    }
                }
            }
        }

        return dp[0][n - 1];
    }

    public static void main(String[] args) {
        int[] dimensions = {10, 30, 5, 60};
        int minMultiplications = matrixChainOrder(dimensions);
        System.out.println("Minimum number of multiplications: " + minMultiplications);
    }
}

Q2

public class OptimalBinarySearchTree {

    static float optimalBST(float[] keys, float[] freq) {
        int n = keys.length;
        float[][] cost = new float[n + 1][n + 1];

        for (int i = 1; i <= n; i++) {
            cost[i][i] = freq[i - 1];
        }

        for (int L = 2; L <= n; L++) {
            for (int i = 1; i <= n - L + 1; i++) {
                int j = i + L - 1;
                cost[i][j] = Float.MAX_VALUE;
                float sum = getSum(freq, i, j);

                for (int r = i; r <= j; r++) {
                    float c = ((r > i) ? cost[i][r - 1] : 0) +
                              ((r < j) ? cost[r + 1][j] : 0) + sum;
                    if (c < cost[i][j]) {
                        cost[i][j] = c;
                    }
                }
            }
        }

        return cost[1][n];
    }

    static float getSum(float[] freq, int i, int j) {
        float sum = 0;
        for (int k = i - 1; k <= j - 1; k++) {
            sum += freq[k];
        }
        return sum;
    }

    public static void main(String[] args) {
        float[] keys = {10, 12, 20};
        float[] freq = {34, 8, 50};

        float minCost = optimalBST(keys, freq);
        System.out.println("Minimum cost of optimal BST is " + minCost);
    }
}
