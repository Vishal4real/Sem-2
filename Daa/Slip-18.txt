Q1
import java.util.*;

public class GraphColoring {

    static class Graph {
        private int V;
        private LinkedList<Integer>[] adjList;

        Graph(int V) {
            this.V = V;
            adjList = new LinkedList[V];
            for (int i = 0; i < V; i++) {
                adjList[i] = new LinkedList<>();
            }
        }

        void addEdge(int u, int v) {
            adjList[u].add(v);
            adjList[v].add(u); // For undirected graph
        }

        void colorGraph() {
            int[] result = new int[V];
            Arrays.fill(result, -1); // Initialize all vertices as uncolored
            boolean[] available = new boolean[V];
            Arrays.fill(available, true); // All colors initially available

            // Assign the first color to the first vertex
            result[0] = 0;

            // Color remaining V-1 vertices
            for (int u = 1; u < V; u++) {
                for (int neighbor : adjList[u]) {
                    if (result[neighbor] != -1) {
                        available[result[neighbor]] = false;
                    }
                }

                // Find the first available color
                int color;
                for (color = 0; color < V; color++) {
                    if (available[color]) {
                        break;
                    }
                }

                result[u] = color; // Assign the found color to vertex u

                // Reset the values back to true for the next iteration
                Arrays.fill(available, true);
            }

            // Print the vertex-color assignments
            for (int i = 0; i < V; i++) {
                System.out.println("Vertex " + i + " --> Color " + result[i]);
            }
        }
    }

    public static void main(String[] args) {
        int V = 4; // Number of vertices
        Graph graph = new Graph(V);
        graph.addEdge(0, 1);
        graph.addEdge(0, 2);
        graph.addEdge(1, 2);
        graph.addEdge(2, 3);

        System.out.println("Vertex coloring:");
        graph.colorGraph();
    }
}

Q2

import java.util.*;

public class NodeStatus {

    static class Graph {
        private int V;
        private LinkedList<Integer>[] adjList;

        Graph(int V) {
            this.V = V;
            adjList = new LinkedList[V];
            for (int i = 0; i < V; i++) {
                adjList[i] = new LinkedList<>();
            }
        }

        void addEdge(int u, int v) {
            adjList[u].add(v);
            adjList[v].add(u); // For undirected graph
        }

        void findNodeStatus() {
            boolean[] visited = new boolean[V];
            int liveNodes = 0;
            int ENodes = 0;
            int deadNodes = 0;

            for (int i = 0; i < V; i++) {
                if (!visited[i]) {
                    visited[i] = true;
                    if (adjList[i].size() == 0) {
                        deadNodes++;
                    } else {
                        liveNodes++;
                        for (int neighbor : adjList[i]) {
                            if (!visited[neighbor]) {
                                ENodes++;
                            }
                        }
                    }
                }
            }

            System.out.println("Live Nodes: " + liveNodes);
            System.out.println("E Nodes: " + ENodes);
            System.out.println("Dead Nodes: " + deadNodes);
        }
    }

    public static void main(String[] args) {
        int V = 5; // Number of vertices
        Graph graph = new Graph(V);
        graph.addEdge(0, 1);
        graph.addEdge(0, 2);
        graph.addEdge(1, 2);
        graph.addEdge(2, 3);

        System.out.println("Node Status:");
        graph.findNodeStatus();
    }
}
