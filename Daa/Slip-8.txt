Q1.

import java.util.*;

class Item {
    int value;
    int weight;
    double ratio;

    Item(int value, int weight) {
        this.value = value;
        this.weight = weight;
        this.ratio = (double) value / weight;
    }
}

public class FractionalKnapsack {

    public static double getMaxValue(int capacity, Item[] items) {
        Arrays.sort(items, Comparator.comparingDouble(a -> -a.ratio));

        double totalValue = 0;
        int remainingCapacity = capacity;

        for (Item item : items) {
            if (remainingCapacity >= item.weight) {
                totalValue += item.value;
                remainingCapacity -= item.weight;
            } else {
                totalValue += item.ratio * remainingCapacity;
                break;
            }
        }

        return totalValue;
    }

    public static void main(String[] args) {
        int capacity = 50;
        Item[] items = {
                new Item(60, 10),
                new Item(100, 20),
                new Item(120, 30)
        };

        double maxValue = getMaxValue(capacity, items);
        System.out.println("Maximum value that can be obtained: " + maxValue);
    }
}

Q2.

import java.util.*;

public class TravelingSalesman {

    static class Graph {
        private int V;
        private int[][] adjMatrix;

        Graph(int V) {
            this.V = V;
            adjMatrix = new int[V][V];
        }

        void addEdge(int u, int v, int weight) {
            adjMatrix[u][v] = weight;
            adjMatrix[v][u] = weight; // Undirected graph
        }

        List<Integer> nearestNeighbor() {
            List<Integer> path = new ArrayList<>();
            boolean[] visited = new boolean[V];
            int currentVertex = 0;

            path.add(currentVertex);
            visited[currentVertex] = true;

            for (int count = 0; count < V - 1; count++) {
                int nearestVertex = findNearestNeighbor(currentVertex, visited);
                path.add(nearestVertex);
                visited[nearestVertex] = true;
                currentVertex = nearestVertex;
            }

            return path;
        }

        int findNearestNeighbor(int vertex, boolean[] visited) {
            int nearestVertex = -1;
            int minDistance = Integer.MAX_VALUE;

            for (int v = 0; v < V; v++) {
                if (!visited[v] && adjMatrix[vertex][v] != 0 && adjMatrix[vertex][v] < minDistance) {
                    minDistance = adjMatrix[vertex][v];
                    nearestVertex = v;
                }
            }

            return nearestVertex;
        }
    }

    public static void main(String[] args) {
        Graph graph = new Graph(5);
        graph.addEdge(0, 1, 10);
        graph.addEdge(0, 2, 15);
        graph.addEdge(0, 3, 20);
        graph.addEdge(0, 4, 25);
        graph.addEdge(1, 2, 35);
        graph.addEdge(1, 3, 45);
        graph.addEdge(1, 4, 55);
        graph.addEdge(2, 3, 65);
        graph.addEdge(2, 4, 75);
        graph.addEdge(3, 4, 85);

        List<Integer> path = graph.nearestNeighbor();

        System.out.println("Nearest Neighbor Path:");
        for (int vertex : path) {
            System.out.print(vertex + " ");
        }
    }
}
