Q1

import java.util.*;

public class DepthFirstSearch {

    static class Graph {
        private int V;
        private LinkedList<Integer>[] adjList;

        Graph(int V) {
            this.V = V;
            adjList = new LinkedList[V];
            for (int i = 0; i < V; i++) {
                adjList[i] = new LinkedList<>();
            }
        }

        void addEdge(int u, int v) {
            adjList[u].add(v);
        }

        void DFSUtil(int v, boolean[] visited) {
            visited[v] = true;
            for (int neighbor : adjList[v]) {
                if (!visited[neighbor]) {
                    DFSUtil(neighbor, visited);
                }
            }
        }

        void DFS(int start) {
            boolean[] visited = new boolean[V];
            DFSUtil(start, visited);
        }
    }

    public static void main(String[] args) {
        int V = 5; // Number of vertices
        int E = 4; // Number of edges

        Graph graph = new Graph(V);
        graph.addEdge(0, 1);
        graph.addEdge(0, 2);
        graph.addEdge(1, 3);
        graph.addEdge(2, 4);

        long startTime = System.nanoTime(); // Start time

        for (int i = 0; i < V; i++) {
            if (!visited[i]) {
                graph.DFS(i);
            }
        }

        long endTime = System.nanoTime(); // End time
        long duration = (endTime - startTime) / 1000; // Duration in microseconds

        System.out.println("Time taken for DFS: " + duration + " microseconds");
    }
}

Q2

import java.util.*;

public class DijkstraShortestPath {

    static class Graph {
        private int V;
        private List<List<Node>> adjList;

        Graph(int V) {
            this.V = V;
            adjList = new ArrayList<>(V);
            for (int i = 0; i < V; i++) {
                adjList.add(new ArrayList<>());
            }
        }

        void addEdge(int u, int v, int weight) {
            adjList.get(u).add(new Node(v, weight));
            adjList.get(v).add(new Node(u, weight)); // for undirected graph
        }

        void dijkstra(int src) {
            PriorityQueue<Node> pq = new PriorityQueue<>(Comparator.comparingInt(node -> node.weight));
            int[] dist = new int[V];
            Arrays.fill(dist, Integer.MAX_VALUE);
            dist[src] = 0;
            pq.offer(new Node(src, 0));

            while (!pq.isEmpty()) {
                int u = pq.poll().vertex;

                for (Node neighbor : adjList.get(u)) {
                    int v = neighbor.vertex;
                    int weight = neighbor.weight;

                    if (dist[u] != Integer.MAX_VALUE && dist[u] + weight < dist[v]) {
                        dist[v] = dist[u] + weight;
                        pq.offer(new Node(v, dist[v]));
                    }
                }
            }

            // Print shortest distances
            System.out.println("Shortest distances from vertex " + src + " to other vertices:");
            for (int i = 0; i < V; i++) {
                System.out.println("Vertex " + i + ": " + dist[i]);
            }
        }
    }

    static class Node {
        int vertex;
        int weight;

        Node(int vertex, int weight) {
            this.vertex = vertex;
            this.weight = weight;
        }
    }

    public static void main(String[] args) {
        int V = 6; // Number of vertices
        Graph graph = new Graph(V);
        graph.addEdge(0, 1, 5);
        graph.addEdge(0, 2, 3);
        graph.addEdge(1, 3, 6);
        graph.addEdge(1, 2, 2);
        graph.addEdge(2, 4, 4);
        graph.addEdge(2, 5, 2);
        graph.addEdge(2, 3, 7);
        graph.addEdge(3, 4, -1);
        graph.addEdge(4, 5, -2);

        int sourceVertex = 0; // Source vertex

        graph.dijkstra(sourceVertex);
    }
}
