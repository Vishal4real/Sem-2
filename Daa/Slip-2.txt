Q1.

import java.util.*;

public class HeapSort {
    
    public static void heapSort(int[] arr) {
        int n = arr.length;   
        // Build heap (rearrange array)
        for (int i = n / 2 - 1; i >= 0; i--) {
            heapify(arr, n, i);
        }   
        // One by one extract an element from heap
        for (int i = n - 1; i > 0; i--) {
            // Move current root to end
            int temp = arr[0];
            arr[0] = arr[i];
            arr[i] = temp;
            
            // call max heapify on the reduced heap
            heapify(arr, i, 0);
        }
    }
    
    public static void heapify(int[] arr, int n, int i) {
        int largest = i; // Initialize largest as root
        int left = 2 * i + 1; // left = 2*i + 1
        int right = 2 * i + 2; // right = 2*i + 2  
        // If left child is larger than root
        if (left < n && arr[left] > arr[largest]) {
            largest = left;
        }    
        // If right child is larger than largest so far
        if (right < n && arr[right] > arr[largest]) {
            largest = right;
        }  
        // If largest is not root
        if (largest != i) {
            int swap = arr[i];
            arr[i] = arr[largest];
            arr[largest] = swap;
            
            // Recursively heapify the affected sub-tree
            heapify(arr, n, largest);
        }
    }
    
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Random random = new Random();
        
        System.out.print("Enter the number of elements: ");
        int n = scanner.nextInt();
        int[] arr = new int[n];

        for (int i = 0; i < n; i++) {
            arr[i] = random.nextInt(1000); 
        }

        System.out.println("Unsorted array:");
        System.out.println(Arrays.toString(arr));
        
        // Measure time taken to sort
        long startTime = System.nanoTime();
        heapSort(arr);
        long endTime = System.nanoTime();
        long timeElapsed = endTime - startTime;
        
        System.out.println("\nSorted array:");
        System.out.println(Arrays.toString(arr));
        System.out.println("\nTime taken: " + timeElapsed + " nanoseconds");
    }
}

Q2.

public class StrassenMatrixMultiplication {

    public static int[][] multiply(int[][] A, int[][] B) {
        int n = A.length;
        int[][] C = new int[n][n];
        if (n == 1) {
            C[0][0] = A[0][0] * B[0][0];
        } else {
            int[][] A11 = subMatrix(A, 0, 0);
            int[][] A12 = subMatrix(A, 0, n / 2);
            int[][] A21 = subMatrix(A, n / 2, 0);
            int[][] A22 = subMatrix(A, n / 2, n / 2);

            int[][] B11 = subMatrix(B, 0, 0);
            int[][] B12 = subMatrix(B, 0, n / 2);
            int[][] B21 = subMatrix(B, n / 2, 0);
            int[][] B22 = subMatrix(B, n / 2, n / 2);

            int[][] P1 = multiply(add(A11, A22), add(B11, B22));
            int[][] P2 = multiply(add(A21, A22), B11);
            int[][] P3 = multiply(A11, sub(B12, B22));
            int[][] P4 = multiply(A22, sub(B21, B11));
            int[][] P5 = multiply(add(A11, A12), B22);
            int[][] P6 = multiply(sub(A21, A11), add(B11, B12));
            int[][] P7 = multiply(sub(A12, A22), add(B21, B22));

            int[][] C11 = add(sub(add(P1, P4), P5), P7);
            int[][] C12 = add(P3, P5);
            int[][] C21 = add(P2, P4);
            int[][] C22 = sub(sub(add(P1, P2), P3), P6);

            combine(C11, C, 0, 0);
            combine(C12, C, 0, n / 2);
            combine(C21, C, n / 2, 0);
            combine(C22, C, n / 2, n / 2);
        }
        return C;
    }

    public static int[][] subMatrix(int[][] matrix, int rowOffset, int colOffset) {
        int n = matrix.length / 2;
        int[][] sub = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                sub[i][j] = matrix[i + rowOffset][j + colOffset];
            }
        }
        return sub;
    }

    public static void combine(int[][] subMatrix, int[][] matrix, int rowOffset, int colOffset) {
        int n = subMatrix.length;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                matrix[i + rowOffset][j + colOffset] = subMatrix[i][j];
            }
        }
    }

    public static int[][] add(int[][] A, int[][] B) {
        int n = A.length;
        int[][] C = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                C[i][j] = A[i][j] + B[i][j];
            }
        }
        return C;
    }

    public static int[][] sub(int[][] A, int[][] B) {
        int n = A.length;
        int[][] C = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                C[i][j] = A[i][j] - B[i][j];
            }
        }
        return C;
    }

    public static void main(String[] args) {
        int[][] A = { { 1, 2, 3, 4 }, { 5, 6, 7, 8 }, { 9, 10, 11, 12 }, { 13, 14, 15, 16 } };
        int[][] B = { { 17, 18, 19, 20 }, { 21, 22, 23, 24 }, { 25, 26, 27, 28 }, { 29, 30, 31, 32 } };

        int[][] C = multiply(A, B);

        for (int[] row : C) {
            for (int value : row) {
                System.out.print(value + " ");
            }
            System.out.println();
        }
    }
}
