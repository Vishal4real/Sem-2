Q1

import java.util.*;

public class TopologicalSort {

    static class Graph {
        private int V;
        private LinkedList<Integer>[] adjList;

        Graph(int V) {
            this.V = V;
            adjList = new LinkedList[V];
            for (int i = 0; i < V; i++) {
                adjList[i] = new LinkedList<>();
            }
        }

        void addEdge(int u, int v) {
            adjList[u].add(v);
        }

        void topologicalSort() {
            int[] inDegree = new int[V];
            for (int i = 0; i < V; i++) {
                for (int neighbor : adjList[i]) {
                    inDegree[neighbor]++;
                }
            }

            Queue<Integer> queue = new LinkedList<>();
            for (int i = 0; i < V; i++) {
                if (inDegree[i] == 0) {
                    queue.add(i);
                }
            }

            int count = 0;
            List<Integer> result = new ArrayList<>();

            while (!queue.isEmpty()) {
                int u = queue.poll();
                result.add(u);
                for (int neighbor : adjList[u]) {
                    if (--inDegree[neighbor] == 0) {
                        queue.add(neighbor);
                    }
                }
                count++;
            }

            if (count != V) {
                System.out.println("Graph has a cycle!");
                return;
            }

            System.out.println("Topological sorting:");
            for (int vertex : result) {
                System.out.print(vertex + " ");
            }
        }
    }

    public static void main(String[] args) {
        int V = 6; // Number of vertices
        Graph graph = new Graph(V);
        graph.addEdge(5, 2);
        graph.addEdge(5, 0);
        graph.addEdge(4, 0);
        graph.addEdge(4, 1);
        graph.addEdge(2, 3);
        graph.addEdge(3, 1);

        graph.topologicalSort();
    }
}

Q2

import java.util.*;

public class NQueens {

    static void solveNQueens(int N) {
        int[] queens = new int[N];
        Arrays.fill(queens, -1);
        solveNQueensUtil(queens, 0);
    }

    static boolean isSafe(int[] queens, int row, int col) {
        for (int i = 0; i < row; i++) {
            if (queens[i] == col || queens[i] - i == col - row || queens[i] + i == col + row) {
                return false;
            }
        }
        return true;
    }

    static boolean solveNQueensUtil(int[] queens, int row) {
        int N = queens.length;
        if (row == N) {
            printBoard(queens);
            return true;
        }

        for (int col = 0; col < N; col++) {
            if (isSafe(queens, row, col)) {
                queens[row] = col;
                if (solveNQueensUtil(queens, row + 1)) {
                    return true;
                }
                queens[row] = -1; // backtrack
            }
        }
        return false;
    }

    static void printBoard(int[] queens) {
        int N = queens.length;
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                if (queens[i] == j) {
                    System.out.print("Q ");
                } else {
                    System.out.print("_ ");
                }
            }
            System.out.println();
        }
        System.out.println();
    }

    public static void main(String[] args) {
        int N = 4; // Number of Queens
        solveNQueens(N);
    }
}
